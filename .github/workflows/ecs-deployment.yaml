name: Build image and deploy to ECS
on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  NODE_IMAGE_NAME: ecs-demo-node
  REACT_IMAGE_NAME: ecs-demo-client
  AWS_REGION: us-east-1
  ECS_TASK_DEFINITION: ECSdemotd
  NODE_CONTAINER_NAME: nodeappcontainer
  REACT_CONTAINER_NAME: reactappcontainer
  ECS_SERVICE: ECSdemoservice
  ECS_CLUSTER: ECS-demo-cluster
jobs:
  build-image-node:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKER_USERNAME}}/${{env.NODE_IMAGE_NAME}}
          tags: |
            latest
            v1.0.${{github.run_number}}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: ./API-jokes
          file: ./API-jokes/Dockerfile.prod
          push: true
          tags: ${{steps.meta.outputs.tags}}
  build-image-react:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Added details to image
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{vars.DOCKER_USERNAME}}/${{env.REACT_IMAGE_NAME}}
          tags: |
            latest
            v1.0.${{github.run_number}}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push docker image
        uses: docker/build-push-action@v6
        with:
          context: ./react-client
          file: ./react-client/Dockerfile.prod
          push: true
          build-args: |
            VITE_API_BASE_URL=http://ecsdemolb-1486322725.us-east-1.elb.amazonaws.com
          tags: ${{steps.meta.outputs.tags}}
  deploy-to-ecs:
    runs-on: ubuntu-latest
    needs:
      - build-image-node
      - build-image-react
    steps:

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Fill in the new image ID for node in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition-family: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.NODE_CONTAINER_NAME }}
          image: ${{vars.DOCKER_USERNAME}}/${{env.NODE_IMAGE_NAME}}
      
      - name: Modify Amazon ECS task definition with second container for react
        id: taskdef-react
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          container-name: ${{ env.REACT_CONTAINER_NAME }}
          image: ${{vars.DOCKER_USERNAME}}/${{env.REACT_IMAGE_NAME}}
          
      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.taskdef-react.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
